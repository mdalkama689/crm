generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Tenant {
  id             String         @id @default(uuid())
  name           String         @unique
  employeeRange  EmployeeRange?
  businessType   String?
  address        String?
  normalizedName String         @unique
  isVerified     Boolean
  employees      Employee[]
  projects       Project[]
  tasks          Task[]
}

model Employee {
  id                       String         @id @default(uuid())
  fullname                 String
  email                    String         @unique
  password                 String
  role                     String         @default("employee")
  tenantId                 String?
  invitationLink           String?
  invitationLinkExpireTime DateTime?
  isVerified               Boolean        @default(false)
  isNewLetterSubscribed    Boolean        @default(false)
  forgotPasswordExpiry     DateTime?
  forgotPasswordOtp        String?
  passwordResetToken       String?
  passwordResetTokenExpiry DateTime?
  isOtpVerified            Boolean        @default(false)
  comments                 Comment[]
  tenant                   Tenant?        @relation(fields: [tenantId], references: [id])
  notifications            Notification[]
  projects                 Project[]
  tasks                    Task[]
  projectAssigned          Project[]      @relation("ProjectAssignment")
  taskAssigned             Task[]         @relation("TaskAssignment")
}

model Project {
  id               String     @id @default(uuid())
  name             String
  dueDate          String?
  description      String?
  tenantId         String
  createdBy        String
  createdAt        DateTime   @default(now())
  attachmentUrl    String?
  iconUrl          String?
  attachmentSize   String?
  comments         Comment[]
  employee         Employee   @relation(fields: [createdBy], references: [id])
  tenant           Tenant     @relation(fields: [tenantId], references: [id])
  tasks            Task[]
  assignToEmployee Employee[] @relation("ProjectAssignment")
}

model Task {
  id               String     @id @default(uuid())
  status           TaskStatus @default(PENDING)
  createdBy        String
  projectId        String
  tenantId         String
  attachmentUrl    String?
  description      String?
  dueDate          String?
  name             String
  createdAt        DateTime   @default(now())
  attachmentSize   String?
  comments         Comment[]
  employee         Employee   @relation(fields: [createdBy], references: [id])
  project          Project    @relation(fields: [projectId], references: [id])
  tenant           Tenant     @relation(fields: [tenantId], references: [id])
  taskItems        TaskItem[]
  assigedEmployees Employee[] @relation("TaskAssignment")
}

model TaskItem {
  id        String  @id @default(uuid())
  name      String
  completed Boolean @default(false)
  taskId    String
  task      Task    @relation(fields: [taskId], references: [id])
}

model Notification {
  id         String                 @id @default(uuid())
  text       String
  seen       Boolean                @default(false)
  employeeId String
  enitityId  String
  entityType NotificationEntityType
  createdAt  DateTime               @default(now())
  employee   Employee               @relation(fields: [employeeId], references: [id])
}

model Comment {
  id             String   @id @default(uuid())
  text           String?
  attachmentUrl  String?
  creatorId      String
  taskId         String
  createdAt      DateTime @default(now())
  projectId      String
  attachmentSize String?
  employee       Employee @relation(fields: [creatorId], references: [id])
  project        Project  @relation(fields: [projectId], references: [id])
  task           Task     @relation(fields: [taskId], references: [id])
}

model playing_with_neon {
  id    Int    @id @default(autoincrement())
  name  String
  value Float? @db.Real
}

enum EmployeeRange {
  RANGE_1_10
  RANGE_10_50
  RANGE_50_100
  RANGE_100_PLUS
}

enum TaskStatus {
  PENDING
  HOLD
  DONE
}

enum NotificationEntityType {
  TASK
  PROJECT
  COMMENT
}
