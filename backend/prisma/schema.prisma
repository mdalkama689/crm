generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum EmployeeRange {
  RANGE_1_10
  RANGE_10_50
  RANGE_50_100
  RANGE_100_PLUS
}

enum TaskStatus {
   PENDING
   ON_HOLDING
   DONE 
}

enum NotificationEntityType {
  TASK 
  PROJECT
  COMMENT 
}



model Tenant {
  id   String         @id @default(uuid())
  name String @unique
  normalizedName String @unique
  isVerified Boolean
  employeeRange EmployeeRange?
  businessType            String?
  address                 String?
  employees Employee[]
  projects Project[]
  tasks Task[]
}

model Employee {
   id                      String    @id @default(uuid())
   fullname                String
   email                   String    @unique
   password                String
   role                    String    @default("employee")
   invitationLink   String?
   invitationLinkExpireTime DateTime?
   isVerified Boolean @default(false)
   forgotPasswordOtp String?
   forgotPasswordExpiry DateTime?
   isOtpVerified Boolean @default(false)
   passwordResetToken String?
   passwordResetTokenExpiry DateTime?
   isNewLetterSubscribed Boolean @default(false)
   tenantId String?
   tenant Tenant? @relation(fields: [tenantId], references: [id])
   projects Project[]
   projectAssigned Project[] @relation("ProjectAssignment")
   taskAssigned Task[] @relation("TaskAssignment")
   tasks Task[]
   notifications Notification[]
   comments Comment[]
}
 
model Project {
    id               String     @id @default(uuid())
    name             String
    iconUrl             String?
    createdAt DateTime @default(now())
    dueDate          String? 
    description      String?
    attachmentUrl       String?
    createdBy       String
    employee         Employee   @relation(fields: [createdBy], references: [id])
    tenantId String
    tenant Tenant? @relation(fields: [tenantId], references: [id])
    assignToEmployee Employee[] @relation("ProjectAssignment")
    tasks Task[]
    comments Comment[]
}

 
model Task {
      id               String     @id @default(uuid())
      name String
      dueDate String?
      description String?
      attachmentUrl String?  
      status  TaskStatus @default(PENDING)
      assigedEmployees Employee[] @relation("TaskAssignment")
      createdBy String 
      createdAt DateTime @default(now())
      employee Employee @relation(fields: [createdBy], references: [id])
      projectId String
      project Project @relation(fields: [projectId],references: [id])
      tenantId String
      tenant Tenant @relation(fields: [tenantId], references: [id])
      taskItems  TaskItem[]    
      comments Comment[]
}


model TaskItem{
  id String @id @default(uuid())
name String
completed Boolean @default(false)
taskId String
task Task @relation(fields: [taskId], references: [id])
}


model Notification{
  id String @id @default(uuid())
  text String
  seen Boolean @default(false)
  entityType NotificationEntityType
  enitityId  String 
  employeeId String
  employee Employee @relation(fields: [employeeId], references: [id])
  createdAt DateTime @default(now())
}


model Comment {
  id String @id @default(uuid())
  text String?
  attachmentUrl String?
  creatorId String
  employee Employee @relation(fields: [creatorId], references: [id])
  taskId String
  task Task @relation(fields: [taskId], references: [id])
  projectId String
  project Project @relation(fields: [projectId], references: [id])
  createdAt DateTime @default(now())
}
